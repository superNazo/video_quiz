require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe AnswersController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Answer. As you add validations to Answer, be sure to
  # adjust the attributes here as well.
  before(:each) do
    @user = User.create!(email: "user@example.org", name: "Name")
    sign_in @user
    @quiz = Quiz.create!(name: 'This is quiz #1')
    @interview = Interview.create!(quiz_id: 1, user_id: 1, current_question_id: 1)
    @quiz.questions.create!(content: 'This is question #1',record_time_limit: 10)
    @first_question = @quiz.questions.first
  end

  let(:valid_attributes) {
    { interview_id: 1, video_token: 'myString' }
  }

  let(:invalid_attributes) {
    { interview_id: '', video_token: '' }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # AnswersController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #new" do
    it "assigns a new answer as @answer" do
      get :new, {:quiz_id => @quiz.id}, valid_session
      expect(assigns(:answer)).to be_a_new(Answer)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Answer" do
        expect {
          post :create, {:quiz_id => @quiz.id, :answer => valid_attributes}, valid_session
        }.to change(Answer, :count).by(1)
      end

      it "assigns a newly created answer as @answer" do
        post :create, {:quiz_id => @quiz.id, :answer => valid_attributes}, valid_session
        expect(assigns(:answer)).to be_a(Answer)
        expect(assigns(:answer)).to be_persisted
      end

      it "redirects to the quiz_interviews_show_path" do
        post :create, {:quiz_id => @quiz.id, :answer => valid_attributes}, valid_session
        get :new, {:quiz_id => @quiz.id}, valid_session
        expect(response).to redirect_to(quiz_interviews_show_path)
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved answer as @answer" do
        post :create, {:quiz_id => @quiz.id, :answer => invalid_attributes}, valid_session
        expect(assigns(:answer)).to be_a_new(Answer)
      end

      it "re-renders the 'new' template" do
        post :create, {:quiz_id => @quiz.id, :answer => invalid_attributes}, valid_session
        expect(response).to render_template("new")
      end
    end
  end

end
